<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zefun.web.mapper.ShiftMahjongEmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.zefun.web.entity.ShiftMahjongEmployee" >
    <id column="shift_mahjong_employee_id" property="shiftMahjongEmployeeId" jdbcType="INTEGER" />
    <result column="shift_mahjong_id" property="shiftMahjongId" jdbcType="INTEGER" />
    <result column="level_id" property="levelId" jdbcType="INTEGER" />
    <result column="is_punch_card" property="isPunchCard" jdbcType="INTEGER" />
    <result column="employees_id" property="employeesId" jdbcType="INTEGER" />
    <result column="employee_code" property="employeeCode" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="head_image" property="headImage" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="is_appoint" property="isAppoint" jdbcType="INTEGER" />
    <result column="appoint_number" property="appointNumber" jdbcType="INTEGER" />
    <result column="shift_mahjong_order" property="shiftMahjongOrder" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
    <result column="operator_id" property="operatorId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    shift_mahjong_employee_id, shift_mahjong_id, level_id, is_punch_card, employees_id, employee_code, 
    name, head_image, state, is_appoint, appoint_number, shift_mahjong_order, create_time, 
    operator_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from shift_mahjong_employee
    where shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from shift_mahjong_employee
    where shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    insert into shift_mahjong_employee (shift_mahjong_employee_id, shift_mahjong_id, 
      level_id, is_punch_card, employees_id, employee_code, 
      name, head_image, state, 
      is_appoint, appoint_number, shift_mahjong_order, 
      create_time, operator_id)
    values (#{shiftMahjongEmployeeId,jdbcType=INTEGER}, #{shiftMahjongId,jdbcType=INTEGER}, 
      #{levelId,jdbcType=INTEGER}, #{isPunchCard,jdbcType=INTEGER}, #{employeesId,jdbcType=INTEGER}, #{employeeCode,jdbcType=INTEGER}, 
      #{name,jdbcType=VARCHAR}, #{headImage,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, 
      #{isAppoint,jdbcType=INTEGER}, #{appointNumber,jdbcType=INTEGER}, #{shiftMahjongOrder,jdbcType=INTEGER}, 
      #{createTime,jdbcType=CHAR}, #{operatorId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    insert into shift_mahjong_employee
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="shiftMahjongEmployeeId != null" >
        shift_mahjong_employee_id,
      </if>
      <if test="shiftMahjongId != null" >
        shift_mahjong_id,
      </if>
      <if test="levelId != null" >
        level_id,
      </if>
      <if test="isPunchCard != null" >
        is_punch_card,
      </if>
      <if test="employeesId != null" >
        employees_id,
      </if>
      <if test="employeeCode != null" >
        employee_code,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="headImage != null" >
        head_image,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="isAppoint != null" >
        is_appoint,
      </if>
      <if test="appointNumber != null" >
        appoint_number,
      </if>
      <if test="shiftMahjongOrder != null" >
        shift_mahjong_order,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="operatorId != null" >
        operator_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="shiftMahjongEmployeeId != null" >
        #{shiftMahjongEmployeeId,jdbcType=INTEGER},
      </if>
      <if test="shiftMahjongId != null" >
        #{shiftMahjongId,jdbcType=INTEGER},
      </if>
      <if test="levelId != null" >
        #{levelId,jdbcType=INTEGER},
      </if>
      <if test="isPunchCard != null" >
        #{isPunchCard,jdbcType=INTEGER},
      </if>
      <if test="employeesId != null" >
        #{employeesId,jdbcType=INTEGER},
      </if>
      <if test="employeeCode != null" >
        #{employeeCode,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="headImage != null" >
        #{headImage,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="isAppoint != null" >
        #{isAppoint,jdbcType=INTEGER},
      </if>
      <if test="appointNumber != null" >
        #{appointNumber,jdbcType=INTEGER},
      </if>
      <if test="shiftMahjongOrder != null" >
        #{shiftMahjongOrder,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=CHAR},
      </if>
      <if test="operatorId != null" >
        #{operatorId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee
    <set >
      <if test="shiftMahjongId != null" >
        shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER},
      </if>
      <if test="levelId != null" >
        level_id = #{levelId,jdbcType=INTEGER},
      </if>
      <if test="isPunchCard != null" >
        is_punch_card = #{isPunchCard,jdbcType=INTEGER},
      </if>
      <if test="employeesId != null" >
        employees_id = #{employeesId,jdbcType=INTEGER},
      </if>
      <if test="employeeCode != null" >
        employee_code = #{employeeCode,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="headImage != null" >
        head_image = #{headImage,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="isAppoint != null" >
        is_appoint = #{isAppoint,jdbcType=INTEGER},
      </if>
      <if test="appointNumber != null" >
        appoint_number = #{appointNumber,jdbcType=INTEGER},
      </if>
      <if test="shiftMahjongOrder != null" >
        shift_mahjong_order = #{shiftMahjongOrder,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=CHAR},
      </if>
      <if test="operatorId != null" >
        operator_id = #{operatorId,jdbcType=INTEGER},
      </if>
    </set>
    where shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee
    set shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER},
      level_id = #{levelId,jdbcType=INTEGER},
      is_punch_card = #{isPunchCard,jdbcType=INTEGER},
      employees_id = #{employeesId,jdbcType=INTEGER},
      employee_code = #{employeeCode,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      head_image = #{headImage,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      is_appoint = #{isAppoint,jdbcType=INTEGER},
      appoint_number = #{appointNumber,jdbcType=INTEGER},
      shift_mahjong_order = #{shiftMahjongOrder,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=CHAR},
      operator_id = #{operatorId,jdbcType=INTEGER}
    where shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER}
  </update>
  
  <select id="selectByShiftMahjongId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from shift_mahjong_employee
    where shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER} order by shift_mahjong_order
  </select>
  
  <insert id="insertShiftMahjongEmployeeList" parameterType="java.util.List">  
  	insert into shift_mahjong_employee (shift_mahjong_employee_id, shift_mahjong_id, 
      level_id, is_punch_card, employees_id, employee_code, 
      name, head_image, state, 
      is_appoint, appoint_number, shift_mahjong_order, 
      create_time, operator_id)
    values 
    <foreach collection="list" item="item" index="index"  separator=",">  
	     (#{item.shiftMahjongEmployeeId,jdbcType=INTEGER}, #{item.shiftMahjongId,jdbcType=INTEGER}, 
	      #{item.levelId,jdbcType=INTEGER}, #{item.isPunchCard,jdbcType=INTEGER}, #{item.employeesId,jdbcType=INTEGER}, #{item.employeeCode,jdbcType=INTEGER}, 
	      #{item.name,jdbcType=VARCHAR}, #{item.headImage,jdbcType=VARCHAR}, #{item.state,jdbcType=INTEGER}, 
	      #{item.isAppoint,jdbcType=INTEGER}, #{item.appointNumber,jdbcType=INTEGER}, #{item.shiftMahjongOrder,jdbcType=INTEGER}, 
	      #{item.createTime,jdbcType=CHAR}, #{item.operatorId,jdbcType=INTEGER})
    </foreach>
  </insert>
  
  <select id="selectByPositionIdList" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select distinct a.position_id from employee_level a where exists(select 1 from shift_mahjong_employee b where b.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER} and b.level_id = a.level_id) 
  </select>
  
  <select id="selectByPositionIdMap" resultType="java.util.Map" parameterType="java.lang.Integer" >
    select distinct a.position_id as positionId, c.is_punch_card as isPunchCard from employee_level a, shift_mahjong_employee c where 
    exists(select 1 from shift_mahjong_employee b where b.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER} and b.level_id = a.level_id) 
    and a.is_deleted = 0
    and c.level_id = a.level_id and c.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByShiftMahjongId" parameterType="java.lang.Integer" >
    delete from shift_mahjong_employee
    where shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER}
  </delete>
  
  
  <update id="updateByUpward" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee set shift_mahjong_order = #{shiftMahjongOrder,jdbcType=INTEGER} -1 where shift_mahjong_employee_id = #{shiftMahjongEmployeeId, jdbcType=INTEGER}
  </update>
  
  <update id="updateByUpwardOther" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee set shift_mahjong_order = #{shiftMahjongOrder,jdbcType=INTEGER} where shift_mahjong_order = #{shiftMahjongOrder,jdbcType=INTEGER} -1 and shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER}
  </update>
  
  <update id="updateByUpwardAll" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee a, shift_mahjong c set a.shift_mahjong_order = a.shift_mahjong_order - 1  where a.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER}
    and a.state != 3 and a.shift_mahjong_id = c.shift_mahjong_id and ((c.nature = 2 and a.state != 2) or (c.nature = 1))
  </update>
  
  
  <update id="updateByUpwardAllCount" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee b 
    inner join  (select count(*)  as shift_mahjong_order from shift_mahjong_employee a, shift_mahjong c 
                        where a.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER} and a.shift_mahjong_id = c.shift_mahjong_id and a.state != 3 
                        and ((c.nature = 2 and a.state != 2) or (c.nature = 1))
                ) c 
    set b.shift_mahjong_order = c.shift_mahjong_order
    where b.shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER};
  </update>
  
  <update id="updateByToEnd" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee a,shift_mahjong_employee b, shift_mahjong c set a.shift_mahjong_order = a.shift_mahjong_order - 1 
    where b.shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER} and a.shift_mahjong_id = b.shift_mahjong_id and a.shift_mahjong_order > b.shift_mahjong_order 	
    and a.state != 3 and a.shift_mahjong_id = c.shift_mahjong_id and ((c.nature = 2 and a.state != 2) or (c.nature = 1))
  </update>
    
  <update id="updateByNext" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee set shift_mahjong_order = #{shiftMahjongOrder,jdbcType=INTEGER} + 1 where shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER}
  </update>
  
  <update id="updateByNextOther" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee set shift_mahjong_order = #{shiftMahjongOrder,jdbcType=INTEGER} where shift_mahjong_order = #{shiftMahjongOrder,jdbcType=INTEGER} + 1 and shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER}
  </update>
  
  <update id="updateByNextdAll" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee a, shift_mahjong c set a.shift_mahjong_order = a.shift_mahjong_order + 1  where a.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER}
    and a.state != 3 and a.shift_mahjong_id = c.shift_mahjong_id and ((c.nature = 2 and a.state != 2) or (c.nature = 1))
  </update>
  
  <update id="updateByNextAllCount" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee set shift_mahjong_order = 1
    where shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER};
  </update>
  
  <update id="updateIsPunchCard" parameterType="com.zefun.web.entity.ShiftMahjongEmployee" >
    update shift_mahjong_employee a set a.is_punch_card = #{isPunchCard, jdbcType=INTEGER}
    where a.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER} AND a.level_id IN
    (select b.level_id from employee_level b where b.position_id = #{positionId,jdbcType=INTEGER} AND is_deleted = 0)
  </update>
  
  <select id="selectByCount" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select count(*) from shift_mahjong_employee a, shift_mahjong c 
                        where a.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER} and a.shift_mahjong_id = c.shift_mahjong_id and a.state != 3 
                        and ((c.nature = 2 and a.state != 2) or (c.nature = 1))
  </select>
  
  <select id="selectByEmployeesId" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select employees_id from shift_mahjong_employee a where exists(select 1 from shift_mahjong_employee b where b.employees_id = #{employeesId,jdbcType=INTEGER} and b.shift_mahjong_id = a.shift_mahjong_id) group by a.employees_id
  </select>
  
  <select id="selectShiftMahjongEmployeeList" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select *  from shift_mahjong_employee where employees_id = #{employeesId,jdbcType=INTEGER}
  </select>
  
  <select id="selectShiftMahjongIdList" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select a.shift_mahjong_id from shift_mahjong_employee a 
    where a.level_id in 
                    (select b.level_id from employee_level b 
						   where exists(select 1 from employee_level c where c.position_id = b.position_id and c.level_id = #{levelId,jdbcType=INTEGER})
						  ) group by a.shift_mahjong_id
  </select>
  
<!--   <select id="selectShiftMahjongEmployeeList" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select * from shift_mahjong_employee a where 
    exists(select 1 from project_commission b where b.project_id = #{projectId,jdbcType=INTEGER} and a.level_id = b.level_id and b.is_deleted = 0) 
    and exists(select 1 from project_step c where c.project_id = #{projectId,jdbcType=INTEGER}  and a.shift_mahjong_id = c.shift_mahjong_id and c.is_deleted= 0)
    order by a.shift_mahjong_id, a.shift_mahjong_order
  </select> -->
  
  <select id="selectShiftEmployeeList" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select * from shift_mahjong_employee a where 
    exists(select 1 from project_commission b where b.project_id = #{projectId,jdbcType=INTEGER} and a.level_id = b.level_id and a.shift_mahjong_id = b.shift_mahjong_id and b.is_deleted = 0) 
    and exists(select 1 from project_step c where c.project_id = #{projectId,jdbcType=INTEGER} and c.project_step_order = #{num,jdbcType=INTEGER}  and a.shift_mahjong_id = c.shift_mahjong_id and c.is_deleted= 0)
    order by a.shift_mahjong_order
  </select>
  
  <select id="selectShiftEmployeeListByEmployeeId" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select * from shift_mahjong_employee a where 
    exists(select 1 from project_commission b where b.project_id = #{projectId,jdbcType=INTEGER} and a.level_id = b.level_id and a.shift_mahjong_id = b.shift_mahjong_id and b.is_deleted = 0) 
    and exists(select 1 from project_step c where c.project_id = #{projectId,jdbcType=INTEGER} and c.project_step_order = #{num,jdbcType=INTEGER}  and a.shift_mahjong_id = c.shift_mahjong_id and c.is_deleted= 0)
    and a.employees_id = #{employeesId,jdbcType=INTEGER}
  </select>
  
  <select id="selectShiftMahjongByLevelId" resultType="java.lang.Integer" >
    select distinct level_id from shift_mahjong_employee where shift_mahjong_id in
    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
    	#{item}
    </foreach>
  </select>
  
  <!-- 根据轮牌项目步骤关系标识查询轮牌员工（满足项目中设定级别的排到第一个） -->
  <select id="selectShiftMahjongOneEmployee" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select * from  shift_mahjong_employee d 
	where d.state = 1
	and exists(select 1 from project_commission a, project_step b, shift_mahjong_project_step c 
	       where a.project_id = b.project_id and c.project_step_id = b.project_step_id 
			 and c.shift_mahjong_step_id = #{shiftMahjongStepId,jdbcType=INTEGER} 
			 and b.shift_mahjong_id = d.shift_mahjong_id and a.shift_mahjong_id = b.shift_mahjong_id
			 and d.level_id = a.level_id and a.is_deleted= 0 and b.is_deleted= 0 and c.is_deleted= 0)
	order by shift_mahjong_order limit 1
  </select>
  
  <!-- 根据轮牌项目步骤标识，查出上一个轮牌员工 -->
  <select id="selectShiftMahjongLastEmployee" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select * from  shift_mahjong_employee d 
	where  exists(select 1 from shift_mahjong_project_step a, project_step b, shift_mahjong_project_step e
	       where a.shift_mahjong_step_id = #{shiftMahjongStepId,jdbcType=INTEGER} and a.detail_id = e.detail_id and e.is_over = 1 and b.project_step_id = e.project_step_id
			 and d.shift_mahjong_id = b.shift_mahjong_id and d.employees_id = e.employee_id and b.is_deleted = 0 and a.is_deleted = 0 and e.is_deleted = 0)

  </select>
  
  <!--根据轮牌项目步骤标识，查出该轮牌员工 -->
  <select id="selectShiftMahjongEmployee" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select * from  shift_mahjong_employee d 
	where  exists(select 1 from shift_mahjong_project_step a, project_step b 
	       where a.shift_mahjong_step_id = #{shiftMahjongStepId,jdbcType=INTEGER} and a.project_step_id = b.project_step_id 
	       and d.shift_mahjong_id = b.shift_mahjong_id 
		   and d.employees_id = a.employee_id and b.is_deleted = 0 and a.is_deleted = 0)
  </select>
  
  <update id="updateAddAppointNumber" parameterType="java.lang.Integer" >
    update shift_mahjong_employee
    set appoint_number = appoint_number + 1 
    where shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER}
  </update>
  
  <update id="updateDecreaseAppointNumber" parameterType="java.lang.Integer" >
    update shift_mahjong_employee
    set appoint_number = appoint_number - 1 
    where shift_mahjong_employee_id = #{shiftMahjongEmployeeId,jdbcType=INTEGER}
  </update>
  
  <!--根据岗位标识和轮牌标识，查出所属岗位下轮牌员工 -->
  <select id="selectByPositionId" resultMap="BaseResultMap" parameterType="java.util.Map" >
      select * from shift_mahjong_employee a where exists(select 1 from employee_level b where b.level_id = a.level_id and b.position_id = #{positionId,jdbcType=INTEGER}) 
      and a.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER}
  </select>
  
  <!--根据岗位标识和轮牌标识，查出所属岗位下服务中轮牌员工 -->
  <select id="selectByPositionIdExistsWork" resultMap="BaseResultMap" parameterType="java.util.Map" >
      select * from shift_mahjong_employee a where 
          exists(select 1 from employee_level b 
	          where b.level_id = a.level_id and b.position_id in 
	          <foreach collection="list" open="(" separator="," close=")" item="item">
				#{item} 
			  </foreach>
		  ) 
      and a.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER} and a.state in (0,4)
  </select>
  
  <!--  根据轮牌标识及项目标识，查处对应员工 -->
  <select id="selectByShiftMahjongProjectId" resultMap="BaseResultMap" parameterType="java.util.Map" >
      select 
         * 
      from shift_mahjong_employee a 
      where 
         a.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER}
         and a.level_id in (select 
                                 b.level_id 
                            from project_commission b 
                            where b.project_id = #{projectId,jdbcType=INTEGER} and b.shift_mahjong_id = #{shiftMahjongId,jdbcType=INTEGER})
      
  </select>
</mapper>