<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zefun.web.mapper.MemberInfoMapper" >
  <resultMap id="BaseResultMap" type="com.zefun.web.entity.MemberInfo" >
    <id column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="store_id" property="storeId" jdbcType="INTEGER" />
    <result column="level_id" property="levelId" jdbcType="INTEGER" />
    <result column="recommend_id" property="recommendId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="head_url" property="headUrl" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="CHAR" />
    <result column="birthday" property="birthday" jdbcType="CHAR" />
    <result column="phone" property="phone" jdbcType="CHAR" />
    <result column="community" property="community" jdbcType="VARCHAR" />
    <result column="message_type" property="messageType" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
    <result column="update_time" property="updateTime" jdbcType="CHAR" />
    <result column="is_deleted" property="isDeleted" jdbcType="INTEGER" />
    <result column="last_operator_id" property="lastOperatorId" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="MemberResultMap" type="com.zefun.web.dto.MemberDto" >
    <id column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="store_id" property="storeId" jdbcType="INTEGER" />
    <result column="level_id" property="levelId" jdbcType="INTEGER" />
    <result column="recommend_id" property="recommendId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="CHAR" />
    <result column="birthday" property="birthday" jdbcType="CHAR" />
    <result column="phone" property="phone" jdbcType="CHAR" />
    <result column="community" property="community" jdbcType="VARCHAR" />
    <result column="message_type" property="messageType" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
    <result column="update_time" property="updateTime" jdbcType="CHAR" />
    <result column="is_deleted" property="isDeleted" jdbcType="INTEGER" />
    <result column="last_operator_id" property="lastOperatorId" jdbcType="INTEGER" />
    <association property="memberAccount"  column="member_id" select="com.zefun.web.mapper.MemberAccountMapper.selectByPrimaryKey"></association>
    <association property="memberLevel"  column="level_id" select="com.zefun.web.mapper.MemberLevelMapper.selectByPrimaryKey"></association>
    <association property="storeInfo"  column="store_id" select="com.zefun.web.mapper.StoreInfoMapper.selectByPrimaryKey"></association>
  </resultMap>
  
  <sql id="Base_Column_List" >
    member_id, store_id, level_id, recommend_id, name, head_url, sex, birthday, phone, community, message_type, 
    create_time, update_time, is_deleted, last_operator_id
  </sql>
  
  <select id="selectMemberBaseInfo" parameterType="java.lang.Integer" resultType="com.zefun.web.dto.MemberBaseDto">
    select 
        m.member_id as memberId, 
        m.store_id as storeId,
        s.store_name as storeName,
        (select level_name from member_level where level_id = m.level_id) as levelName, 
        m.level_id as levelId, 
        m.name as name, 
        m.head_url as headUrl, 
        m.sex as sex, 
        m.birthday as birthday, 
        m.phone as phone, 
        m.community as community,
        a.balance_amount as balanceAmount,
        a.balance_giftmoney_amount as giftmoneyAmount,
        a.balance_integral as balanceIntegral,
        a.avg_consume_amount as avgConsumeAmount,
        a.last_consume_time as lastConsumeTime,
        a.avg_consume_days as avgConsumeDays
    from member_info m 
    inner join member_account a
    on m.member_id = a.account_id
    inner join store_info s
    on m.store_id = s.store_id
    where member_id = #{memberId}
  </select>
  
  <select id="selectByDetailId" parameterType="java.lang.Integer" resultType="com.zefun.web.dto.MemberBaseDto">
    select 
        m.member_id as memberId, 
        (select store_name from store_info where store_id = m.store_id) as storeName, 
        (select level_name from member_level where level_id = m.level_id) as levelName, 
        m.level_id as levelId, 
        m.name as name, 
        m.head_url as headUrl, 
        m.sex as sex, 
        m.birthday as birthday, 
        m.phone as phone, 
        m.community as community,
        a.balance_amount as balanceAmount,
        a.balance_integral as balanceIntegral,
        a.avg_consume_amount as avgConsumeAmount,
        a.last_consume_time as lastConsumeTime,
        a.avg_consume_days as avgConsumeDays
    from member_info m 
    inner join member_account a
    on m.member_id = a.account_id
    where exists(select 1 from  order_info k, order_detail j where k.order_id = j.order_id and j.detail_id = #{detailId} and m.member_id = k.member_id) and m.is_deleted = 0
  </select>
  
  <select id="selectMemberIdByPhone" parameterType="com.zefun.web.entity.MemberInfo" resultType="java.lang.Integer" >
    select member_id from member_info a where a.phone = #{phone,jdbcType=CHAR} and a.is_deleted = 0
    and a.store_id in 
    (select store_id from store_info where hq_store_id = (select hq_store_id from store_info c where c.store_id = #{storeId}) or store_id = #{storeId})
  </select>
  
  <select id="selectMemberInfoByPhone" parameterType="com.zefun.web.entity.MemberInfo" resultType="com.zefun.web.dto.MemberBaseDto" >
    select 
        a.member_id as memberId, 
        (select store_name from store_info where store_id = a.store_id) as storeName, 
        (select level_name from member_level where level_id = a.level_id) as levelName, 
        a.level_id as levelId, 
        (select d.balance_amount from member_account d where d.account_id = a.member_id) as balanceAmount, 
        a.name as name, 
        a.sex as sex, 
        a.birthday as birthday, 
        a.phone as phone, 
        a.community as community
    from member_info a where a.phone = #{phone,jdbcType=CHAR} 
         and a.is_deleted = 0 and a.store_id in 
         (select store_id from store_info where hq_store_id = (select hq_store_id from store_info c where c.store_id = #{storeId}) or store_id = #{storeId})
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from member_info
    where member_id = #{memberId,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from member_info
    where member_id = #{memberId,jdbcType=INTEGER}
  </delete>
  
  <insert id="insert" parameterType="com.zefun.web.entity.MemberInfo" useGeneratedKeys="true" keyProperty="memberId">
    insert into member_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="memberId != null" >
        member_id,
      </if>
      <if test="storeId != null" >
        store_id,
      </if>
      <if test="levelId != null" >
        level_id,
      </if>
      <if test="recommendId != null" >
        recommend_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="headUrl != null" >
        head_url,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="birthday != null" >
        birthday,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="community != null" >
        community,
      </if>
      <if test="messageType != null" >
        message_type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="isDeleted != null" >
        is_deleted,
      </if>
      <if test="lastOperatorId != null" >
        last_operator_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="memberId != null" >
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="storeId != null" >
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="levelId != null" >
        #{levelId,jdbcType=INTEGER},
      </if>
      <if test="recommendId != null" >
        #{recommendId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="headUrl != null" >
        #{headUrl,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=CHAR},
      </if>
      <if test="birthday != null" >
        #{birthday,jdbcType=CHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=CHAR},
      </if>
      <if test="community != null" >
        #{community,jdbcType=VARCHAR},
      </if>
      <if test="messageType != null" >
        #{messageType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=CHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=CHAR},
      </if>
      <if test="isDeleted != null" >
        #{isDeleted,jdbcType=INTEGER},
      </if>
      <if test="lastOperatorId != null" >
        #{lastOperatorId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKey" parameterType="com.zefun.web.entity.MemberInfo" >
    update member_info
    <set >
      <if test="storeId != null" >
        store_id = #{storeId,jdbcType=INTEGER},
      </if>
      <if test="levelId != null" >
        level_id = #{levelId,jdbcType=INTEGER},
      </if>
      <if test="recommendId != null" >
        recommend_id = #{recommendId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="headUrl != null" >
        head_url = #{headUrl,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="birthday != null" >
        birthday = #{birthday,jdbcType=CHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=CHAR},
      </if>
      <if test="community != null" >
        community = #{community,jdbcType=VARCHAR},
      </if>
      <if test="messageType != null" >
        message_type = #{messageType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=CHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=CHAR},
      </if>
      <if test="isDeleted != null" >
        is_deleted = #{isDeleted,jdbcType=INTEGER},
      </if>
      <if test="lastOperatorId != null" >
        last_operator_id = #{lastOperatorId,jdbcType=INTEGER},
      </if>
    </set>
    where member_id = #{memberId,jdbcType=INTEGER}
  </update>
  <select id="selectMemberByStoreId" resultMap="ResultDto" parameterType="java.lang.Integer" >
    SELECT wx.*,qw.level_name,rt.* FROM member_info wx,member_level qw,member_account rt 
		WHERE  qw.level_id = wx.level_id
		AND rt.account_id = wx.member_id
		AND wx.store_id = #{storeId,jdbcType=INTEGER}
		AND wx.is_deleted = 0
  </select>
  <resultMap id="ResultDto" type="com.zefun.web.dto.MemberInfoDto" >
    <result column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="store_id" property="storeId" jdbcType="INTEGER" />
    <result column="store_name" property="storeName" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="CHAR" />
    <result column="birthday" property="birthday" jdbcType="CHAR" />
    <result column="phone" property="phone" jdbcType="CHAR" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
    <result column="level_name" property="levelName" jdbcType="VARCHAR" />
    <result column="total_amount" property="totalAmount" jdbcType="DECIMAL" />
    <result column="balance_amount" property="balanceAmount" jdbcType="DECIMAL" />
    <result column="total_integral" property="totalIntegral" jdbcType="INTEGER" />
    <result column="balance_integral" property="balanceIntegral" jdbcType="INTEGER" />
    <result column="total_consume_amount" property="totalConsumeAmount" jdbcType="DECIMAL" />
    <result column="avg_consume_amount" property="avgConsumeAmount" jdbcType="DECIMAL" />
    <result column="last_consume_time" property="lastConsumeTime" jdbcType="CHAR" />
    <result column="avg_consume_days" property="avgConsumeDays" jdbcType="INTEGER" />
  </resultMap>
  
  <select id="selectMemberCountByDate" parameterType="java.util.Map" resultType="java.lang.Integer">
	SELECT COUNT(0) FROM member_info WHERE 
	STR_TO_DATE(create_time,'%Y-%m-%d')  BETWEEN  STR_TO_DATE(#{startDate},'%Y-%m-%d') AND STR_TO_DATE(#{stopDate},'%Y-%m-%d')
	AND member_id IN 
	<foreach collection="memberList" open="(" separator="," close=")" item="item">
	#{item} 
	</foreach>
  </select>
  
  <select id="selectByMemberResultMap" resultMap="MemberResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from member_info
    where member_id = #{memberId,jdbcType=INTEGER}
  </select>
  
  <sql id="selectMemberWithScre">
  SELECT ai.account_id FROM member_account ai,member_info ti
		WHERE 1=1 
		<if test="params.dto.unusedBalanceStart != null">
	  		AND ai.balance_amount &gt;= #{params.dto.unusedBalanceStart}
	  	</if>
	  	<if test="params.dto.unusedBalanceEnd != null">
	  		AND ai.balance_amount &lt;= #{params.dto.unusedBalanceEnd}
	  	</if>
	  	<if test="params.dto.integralBalanceStart != null">
	  		AND ai.balance_integral &gt;= #{params.dto.integralBalanceStart}
	  	</if>
	  	<if test="params.dto.integralBalanceEnd != null">
	  		AND ai.balance_integral &lt;= #{params.dto.integralBalanceEnd}
	  	</if>
	  	<if test="params.dto.cumulativeConsumptionStart != null">
	  		AND ai.total_consume_amount &gt;= #{params.dto.cumulativeConsumptionStart}
	  	</if>
	  	<if test="params.dto.cumulativeConsumptionEnd != null">
	  		AND ai.total_consume_amount &lt;= #{params.dto.cumulativeConsumptionEnd}
	  	</if>
	  	<if test="params.dto.consumptionAverageStart != null">
	  		AND ai.avg_consume_amount &gt;= #{params.dto.consumptionAverageStart}
	  	</if>
	  	<if test="params.dto.consumptionAverageEnd != null">
	  		AND ai.avg_consume_amount &lt;= #{params.dto.consumptionAverageEnd}
	  	</if>
	  	<if test="params.dto.lastConsumeTimeStart != null">
	  		AND ai.last_consume_time &gt;= #{params.dto.lastConsumeTimeStart}
	  	</if>
	  	<if test="params.dto.lastConsumeTimeEnd != null">
	  		AND ai.last_consume_time &lt;= #{params.dto.lastConsumeTimeEnd}
	  	</if>
	  	<if test="params.dto.registrationDateStart != null">
	  		AND STR_TO_DATE(ti.create_time,'%Y-%m-%d') &gt;= #{params.dto.registrationDateStart}
	  	</if>
	  	<if test="params.dto.registrationDateEnd != null">
	  		AND STR_TO_DATE(ti.create_time,'%Y-%m-%d') &lt;= #{params.dto.registrationDateEnd}
	  	</if>
	  	<if test="params.dto.birthdayStart != null">
	  		AND (STR_TO_DATE(ti.birthday,'%Y-%m-%d') &gt;= #{params.dto.birthdayStart} OR (ti.birthday is null or ti.birthday = ''))
	  	</if>
	  	<if test="params.dto.birthdayEnd != null">
	  		AND (STR_TO_DATE(ti.birthday,'%Y-%m-%d') &lt;= #{params.dto.birthdayEnd} OR (ti.birthday is null or ti.birthday = ''))
	  	</if>
	  	<if test="params.dto.sex != null and params.dto.sex != '全部' ">
	 	 	AND wx.sex = #{params.dto.sex}
	  	</if>
	  	<if test="params.dto.sex != null and params.dto.levelId != 0 ">
	  		AND wx.level_id = #{params.dto.levelId}
	  	</if>
	  	<if test="params.dto.storeId != null">
	  		AND ti.store_id = #{params.dto.storeId}
	  	</if>
	  	<if test="params.dto.branchStoreIds != null ">
	  		AND ti.store_id IN (${params.dto.branchStoreIds})
	  	</if>
	  	<if test="params.storeList != null">
			AND ti.store_id IN
			<foreach collection="params.storeList" index="index" open="(" separator="," close=")" item="item">
			#{params.storeList[${index}].storeId}
			</foreach>
	  	</if>    
			AND ai.account_id = ti.member_id
  </sql>
  <select id="selectByPageParams" parameterType="com.zefun.web.entity.Page" resultMap="ResultDto">
 	 SELECT wx.*,qw.level_name,rt.*,si.store_name from member_info wx,member_level qw,member_account rt, store_info si WHERE wx.member_id IN 
 	 ( <include refid="selectMemberWithScre"/> )
	 AND qw.level_id = wx.level_id
	 AND rt.account_id = wx.member_id
	 AND wx.store_id = si.store_id
  </select>
  
  <!-- 会员分组页面 -->
  <sql id="selectMemberWithScres">
  SELECT ai.account_id FROM member_account ai,member_info ti
		WHERE 1=1 
		<if test="unusedBalanceStart != null">
	  		AND ai.balance_amount &gt;= #{unusedBalanceStart}
	  	</if>
	  	<if test="unusedBalanceEnd != null">
	  		AND ai.balance_amount &lt;= #{unusedBalanceEnd}
	  	</if>
	  	<if test="integralBalanceStart != null">
	  		AND ai.balance_integral &gt;= #{integralBalanceStart}
	  	</if>
	  	<if test="integralBalanceEnd != null">
	  		AND ai.balance_integral &lt;= #{integralBalanceEnd}
	  	</if>
	  	<if test="cumulativeConsumptionStart != null">
	  		AND ai.total_consume_amount &gt;= #{cumulativeConsumptionStart}
	  	</if>
	  	<if test="cumulativeConsumptionEnd != null">
	  		AND ai.total_consume_amount &lt;= #{cumulativeConsumptionEnd}
	  	</if>
	  	<if test="consumptionAverageStart != null">
	  		AND ai.avg_consume_amount &gt;= #{consumptionAverageStart}
	  	</if>
	  	<if test="consumptionAverageEnd != null">
	  		AND ai.avg_consume_amount &lt;= #{consumptionAverageEnd}
	  	</if>
	  	<if test="lastConsumeTimeStart != null">
	  		AND ai.last_consume_time &gt;= #{lastConsumeTimeStart}
	  	</if>
	  	<if test="lastConsumeTimeEnd != null">
	  		AND ai.last_consume_time &lt;= #{lastConsumeTimeEnd}
	  	</if>
	  	<if test="registrationDateStart != null">
	  		AND STR_TO_DATE(ti.create_time,'%Y-%m-%d') &gt;= #{registrationDateStart}
	  	</if>
	  	<if test="registrationDateEnd != null">
	  		AND STR_TO_DATE(ti.create_time,'%Y-%m-%d') &lt;= #{registrationDateEnd}
	  	</if>
	  	<if test="birthdayStart != null">
	  		AND (STR_TO_DATE(ti.birthday,'%Y-%m-%d') &gt;= #{birthdayStart} OR (ti.birthday is null or ti.birthday = ''))
	  	</if>
	  	<if test="birthdayEnd != null">
	  		AND (STR_TO_DATE(ti.birthday,'%Y-%m-%d') &lt;= #{birthdayEnd} OR (ti.birthday is null or ti.birthday = ''))
	  	</if>
	  	<if test="sex != null and sex != '全部' ">
	 	 	AND wx.sex = #{sex}
	  	</if>
	  	<if test="levelId != null and levelId != 0 ">
	  		AND wx.level_id = #{levelId}
	  	</if>
	  	    AND ai.account_id = ti.member_id
	  	<if test="branchStoreIds != null">
	  		AND ti.store_id in (${branchStoreIds})
	  	</if>  
	  	<if test="branchStoreIds == null">
	  		AND ti.store_id = #{storeId}
	  	</if>  
  </sql>
  <resultMap id="ResultGroupDto" type="com.zefun.web.dto.MemberGroupDto" >
    	<id column="screening_id" property="groupId" jdbcType="INTEGER" />
	    <result column="screening_name" property="groupName" jdbcType="VARCHAR" />
	    <result column="create_time" property="createTime" jdbcType="CHAR" />
	    <association property="memberIds" column="{
	    	unusedBalanceStart=unused_balance_start,unusedBalanceEnd=unused_balance_end,
	    	integralBalanceStart=integral_balance_start,integralBalanceEnd=integral_balance_end,
	    	birthdayStart=birthday_start,birthdayEnd=birthday_end,
	    	registrationDateStart=registration_date_start,registrationDateEnd=registration_date_end,
	    	consumptionAverageStart=consumption_average_start,consumptionAverageEnd=consumption_average_end,
	    	cumulativeConsumptionStart=cumulative_consumption_start,cumulativeConsumptionEnd=cumulative_consumption_end,
	    	lastConsumeTimeStart=last_consume_time_start,lastConsumeTimeEnd=last_consume_time_end,branchStoreIds=branch_store_ids,
	    	storeId=store_id}" 
	    	select="selectMemberIdsByDtos2"></association>
  </resultMap>
  <select id="selectGroupDtos" parameterType="java.lang.Integer" resultMap="ResultGroupDto">
    select 
    screening_id, screening_name, create_time, unused_balance_start, unused_balance_end, 
    integral_balance_start, integral_balance_end, birthday_start, birthday_end, registration_date_start, 
    registration_date_end, consumption_average_start, consumption_average_end, cumulative_consumption_start, 
    cumulative_consumption_end, last_consume_time_start, last_consume_time_end, store_id, branch_store_ids
    from member_screening
    where store_id = #{storeId,jdbcType=INTEGER}
  </select>
   <select id="selectMemberIdsByDtos2" parameterType="java.util.Map" resultType="java.lang.Integer">
     SELECT wx.member_id from member_info wx,member_level qw,member_account rt WHERE wx.member_id IN ( <include refid="selectMemberWithScres"/> )
	 AND qw.level_id = wx.level_id
	 AND rt.account_id = wx.member_id
  </select>
  
  <!-- 会员页面 -->
  <select id="selectMemberInfosByPage" parameterType="com.zefun.web.entity.Page" resultMap="ResultDto">
      SELECT wx.*,qw.level_name,rt.*,si.store_name from member_info wx,member_level qw,member_account rt, store_info si
		WHERE  qw.level_id = wx.level_id
		AND rt.account_id = wx.member_id
		<if test="params.storeId!=null">
		AND wx.store_id = #{params.storeId,jdbcType=INTEGER}
		AND wx.store_id = si.store_id
		</if>
		<if test="params.storeList!=null">
			AND wx.store_id IN
			<foreach collection="params.storeList" index="index" open="(" separator="," close=")">
			#{params.storeList[${index}].storeId}
			</foreach>
			AND wx.store_id = si.store_id
		</if>
		AND wx.is_deleted = 0
  </select>
  
  
  <select id="selectMemberInfoByWechatParams" parameterType="java.util.List" resultMap="BaseResultMap">
  SELECT b.* FROM member_account a,member_info b WHERE 1 =1
  and a.account_id IN 
	  <foreach collection="list" open="(" separator="," close=")" item="item">
		#{item} 
	  </foreach>
	AND a.wechat_count = 0
	AND a.account_id = b.member_id
  </select>
 
  <select id="selectByPageOrderNameOrPhone" parameterType="com.zefun.web.entity.Page" resultMap="ResultDto">
	  SELECT b.*,qw.level_name,rt.*,si.store_name from member_info b ,member_level qw, member_account rt, store_info si
	  WHERE 1=1 
  		<if test="params.storeId!=null">
		AND b.store_id = #{params.storeId}
		</if>
		<if test="params.storeList!=null">
			AND b.store_id IN
			<foreach collection="params.storeList" index="index" open="(" separator="," close=")">
			#{params.storeList[${index}].storeId}
			</foreach>
		</if>
	  AND b.level_id = qw.level_id
	  AND b.member_id = rt.account_id
	  AND (
	   b.name LIKE CONCAT('%',#{params.content},'%')
	   OR b.phone LIKE CONCAT('%',#{params.content},'%')
	  )
	  <if test="params.sex != '全部'">
	  AND b.sex = #{params.sex}
	  </if>
	  <if test="params.levelId != 0">
	  AND b.level_id = #{params.levelId}
	  </if> 
	  AND b.store_id = si.store_id
  </select>
  
  <select id="selectMemberIdsByLevelIds" parameterType="java.util.List" resultType="java.lang.Integer">
	  select m.member_id from member_info m, member_level l where 
	  l.level_id = m.level_id
	  and l.level_id in
 	  <foreach collection="list" open="(" separator="," close=")" item="item">
	     #{item} 
	  </foreach>
  </select>
  
  <select id="selectMemberNameByMemberId" parameterType="java.lang.Integer" resultType="java.lang.String">
  	select name from member_info where member_id = #{memberId,jdbcType=INTEGER}
  </select>
  
  <select id="selectSelfCashierMemberPassById" parameterType="java.lang.Integer"  resultType="java.util.Map">
  	select a.member_id as memberId, a.store_id as storeId, 
  		  b.pay_password as payPassword, b.password_salt as passwordSalt
  		from member_info a
  		  left join member_account b on (a.member_id = b.account_id)
  	  where a.member_id = #{memberId,jdbcType=INTEGER}
  </select>
  
  <update id="updateTempTableZY">
	  CREATE TABLE temp_table_zy(
		id INT(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,
		NAME VARCHAR(60),
		sex VARCHAR(32),
		level_name VARCHAR(60),
		phone VARCHAR(60),
		balance_amount DECIMAL(8,2),
		store_id INT(11)
	  ) 
  </update>
  <update id="dropTempTableZY">
	  DROP TABLE if exists temp_table_zy
  </update>
  <insert id="insertList" parameterType="java.util.List" useGeneratedKeys="true" >
  insert into member_info (level_id, name, sex, phone, create_time, is_deleted, last_operator_id, store_id) values 
  	<foreach collection="list" item="item" index="index" separator="," >  
        (#{item.levelId},#{item.name},#{item.sex},#{item.phone},#{item.createName},#{item.isDeleted},#{item.lastOperatorId},#{item.storeId})  
    </foreach> 
  </insert>
  
  <select id="selectStoreMemberAmount" parameterType="java.lang.Integer" resultType="com.zefun.web.dto.MemberInfoDto">
  SELECT SUM(balance_amount) as balanceAmount, SUM(total_amount) as totalAmount FROM member_account WHERE account_id IN (
	SELECT member_id FROM member_info WHERE store_id = #{storeId}
	)
  </select>
</mapper>